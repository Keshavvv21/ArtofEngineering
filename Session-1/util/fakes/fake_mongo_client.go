// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/21keshav/IBackendApplication/util"
	"go.mongodb.org/mongo-driver/mongo"
)

type FakeMongoClient struct {
	FindAllObjectsStub        func(string, string, interface{}, int64) error
	findAllObjectsMutex       sync.RWMutex
	findAllObjectsArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 interface{}
		arg4 int64
	}
	findAllObjectsReturns struct {
		result1 error
	}
	findAllObjectsReturnsOnCall map[int]struct {
		result1 error
	}
	FindObjectStub        func(string, string, interface{}, interface{}) error
	findObjectMutex       sync.RWMutex
	findObjectArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 interface{}
		arg4 interface{}
	}
	findObjectReturns struct {
		result1 error
	}
	findObjectReturnsOnCall map[int]struct {
		result1 error
	}
	FindObjectsStub        func(string, string, interface{}, interface{}) error
	findObjectsMutex       sync.RWMutex
	findObjectsArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 interface{}
		arg4 interface{}
	}
	findObjectsReturns struct {
		result1 error
	}
	findObjectsReturnsOnCall map[int]struct {
		result1 error
	}
	GetCollectionStub        func(string, string) *mongo.Collection
	getCollectionMutex       sync.RWMutex
	getCollectionArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getCollectionReturns struct {
		result1 *mongo.Collection
	}
	getCollectionReturnsOnCall map[int]struct {
		result1 *mongo.Collection
	}
	GetDatabaseStub        func(string) *mongo.Database
	getDatabaseMutex       sync.RWMutex
	getDatabaseArgsForCall []struct {
		arg1 string
	}
	getDatabaseReturns struct {
		result1 *mongo.Database
	}
	getDatabaseReturnsOnCall map[int]struct {
		result1 *mongo.Database
	}
	InsertDataStub        func(string, string, interface{}) (*mongo.InsertOneResult, error)
	insertDataMutex       sync.RWMutex
	insertDataArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 interface{}
	}
	insertDataReturns struct {
		result1 *mongo.InsertOneResult
		result2 error
	}
	insertDataReturnsOnCall map[int]struct {
		result1 *mongo.InsertOneResult
		result2 error
	}
	UpdateOneStub        func(string, string, interface{}, interface{}) (*mongo.UpdateResult, error)
	updateOneMutex       sync.RWMutex
	updateOneArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 interface{}
		arg4 interface{}
	}
	updateOneReturns struct {
		result1 *mongo.UpdateResult
		result2 error
	}
	updateOneReturnsOnCall map[int]struct {
		result1 *mongo.UpdateResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMongoClient) FindAllObjects(arg1 string, arg2 string, arg3 interface{}, arg4 int64) error {
	fake.findAllObjectsMutex.Lock()
	ret, specificReturn := fake.findAllObjectsReturnsOnCall[len(fake.findAllObjectsArgsForCall)]
	fake.findAllObjectsArgsForCall = append(fake.findAllObjectsArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 interface{}
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("FindAllObjects", []interface{}{arg1, arg2, arg3, arg4})
	fake.findAllObjectsMutex.Unlock()
	if fake.FindAllObjectsStub != nil {
		return fake.FindAllObjectsStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.findAllObjectsReturns
	return fakeReturns.result1
}

func (fake *FakeMongoClient) FindAllObjectsCallCount() int {
	fake.findAllObjectsMutex.RLock()
	defer fake.findAllObjectsMutex.RUnlock()
	return len(fake.findAllObjectsArgsForCall)
}

func (fake *FakeMongoClient) FindAllObjectsCalls(stub func(string, string, interface{}, int64) error) {
	fake.findAllObjectsMutex.Lock()
	defer fake.findAllObjectsMutex.Unlock()
	fake.FindAllObjectsStub = stub
}

func (fake *FakeMongoClient) FindAllObjectsArgsForCall(i int) (string, string, interface{}, int64) {
	fake.findAllObjectsMutex.RLock()
	defer fake.findAllObjectsMutex.RUnlock()
	argsForCall := fake.findAllObjectsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeMongoClient) FindAllObjectsReturns(result1 error) {
	fake.findAllObjectsMutex.Lock()
	defer fake.findAllObjectsMutex.Unlock()
	fake.FindAllObjectsStub = nil
	fake.findAllObjectsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMongoClient) FindAllObjectsReturnsOnCall(i int, result1 error) {
	fake.findAllObjectsMutex.Lock()
	defer fake.findAllObjectsMutex.Unlock()
	fake.FindAllObjectsStub = nil
	if fake.findAllObjectsReturnsOnCall == nil {
		fake.findAllObjectsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.findAllObjectsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMongoClient) FindObject(arg1 string, arg2 string, arg3 interface{}, arg4 interface{}) error {
	fake.findObjectMutex.Lock()
	ret, specificReturn := fake.findObjectReturnsOnCall[len(fake.findObjectArgsForCall)]
	fake.findObjectArgsForCall = append(fake.findObjectArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 interface{}
		arg4 interface{}
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("FindObject", []interface{}{arg1, arg2, arg3, arg4})
	fake.findObjectMutex.Unlock()
	if fake.FindObjectStub != nil {
		return fake.FindObjectStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.findObjectReturns
	return fakeReturns.result1
}

func (fake *FakeMongoClient) FindObjectCallCount() int {
	fake.findObjectMutex.RLock()
	defer fake.findObjectMutex.RUnlock()
	return len(fake.findObjectArgsForCall)
}

func (fake *FakeMongoClient) FindObjectCalls(stub func(string, string, interface{}, interface{}) error) {
	fake.findObjectMutex.Lock()
	defer fake.findObjectMutex.Unlock()
	fake.FindObjectStub = stub
}

func (fake *FakeMongoClient) FindObjectArgsForCall(i int) (string, string, interface{}, interface{}) {
	fake.findObjectMutex.RLock()
	defer fake.findObjectMutex.RUnlock()
	argsForCall := fake.findObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeMongoClient) FindObjectReturns(result1 error) {
	fake.findObjectMutex.Lock()
	defer fake.findObjectMutex.Unlock()
	fake.FindObjectStub = nil
	fake.findObjectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMongoClient) FindObjectReturnsOnCall(i int, result1 error) {
	fake.findObjectMutex.Lock()
	defer fake.findObjectMutex.Unlock()
	fake.FindObjectStub = nil
	if fake.findObjectReturnsOnCall == nil {
		fake.findObjectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.findObjectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMongoClient) FindObjects(arg1 string, arg2 string, arg3 interface{}, arg4 interface{}) error {
	fake.findObjectsMutex.Lock()
	ret, specificReturn := fake.findObjectsReturnsOnCall[len(fake.findObjectsArgsForCall)]
	fake.findObjectsArgsForCall = append(fake.findObjectsArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 interface{}
		arg4 interface{}
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("FindObjects", []interface{}{arg1, arg2, arg3, arg4})
	fake.findObjectsMutex.Unlock()
	if fake.FindObjectsStub != nil {
		return fake.FindObjectsStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.findObjectsReturns
	return fakeReturns.result1
}

func (fake *FakeMongoClient) FindObjectsCallCount() int {
	fake.findObjectsMutex.RLock()
	defer fake.findObjectsMutex.RUnlock()
	return len(fake.findObjectsArgsForCall)
}

func (fake *FakeMongoClient) FindObjectsCalls(stub func(string, string, interface{}, interface{}) error) {
	fake.findObjectsMutex.Lock()
	defer fake.findObjectsMutex.Unlock()
	fake.FindObjectsStub = stub
}

func (fake *FakeMongoClient) FindObjectsArgsForCall(i int) (string, string, interface{}, interface{}) {
	fake.findObjectsMutex.RLock()
	defer fake.findObjectsMutex.RUnlock()
	argsForCall := fake.findObjectsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeMongoClient) FindObjectsReturns(result1 error) {
	fake.findObjectsMutex.Lock()
	defer fake.findObjectsMutex.Unlock()
	fake.FindObjectsStub = nil
	fake.findObjectsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMongoClient) FindObjectsReturnsOnCall(i int, result1 error) {
	fake.findObjectsMutex.Lock()
	defer fake.findObjectsMutex.Unlock()
	fake.FindObjectsStub = nil
	if fake.findObjectsReturnsOnCall == nil {
		fake.findObjectsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.findObjectsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMongoClient) GetCollection(arg1 string, arg2 string) *mongo.Collection {
	fake.getCollectionMutex.Lock()
	ret, specificReturn := fake.getCollectionReturnsOnCall[len(fake.getCollectionArgsForCall)]
	fake.getCollectionArgsForCall = append(fake.getCollectionArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetCollection", []interface{}{arg1, arg2})
	fake.getCollectionMutex.Unlock()
	if fake.GetCollectionStub != nil {
		return fake.GetCollectionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getCollectionReturns
	return fakeReturns.result1
}

func (fake *FakeMongoClient) GetCollectionCallCount() int {
	fake.getCollectionMutex.RLock()
	defer fake.getCollectionMutex.RUnlock()
	return len(fake.getCollectionArgsForCall)
}

func (fake *FakeMongoClient) GetCollectionCalls(stub func(string, string) *mongo.Collection) {
	fake.getCollectionMutex.Lock()
	defer fake.getCollectionMutex.Unlock()
	fake.GetCollectionStub = stub
}

func (fake *FakeMongoClient) GetCollectionArgsForCall(i int) (string, string) {
	fake.getCollectionMutex.RLock()
	defer fake.getCollectionMutex.RUnlock()
	argsForCall := fake.getCollectionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMongoClient) GetCollectionReturns(result1 *mongo.Collection) {
	fake.getCollectionMutex.Lock()
	defer fake.getCollectionMutex.Unlock()
	fake.GetCollectionStub = nil
	fake.getCollectionReturns = struct {
		result1 *mongo.Collection
	}{result1}
}

func (fake *FakeMongoClient) GetCollectionReturnsOnCall(i int, result1 *mongo.Collection) {
	fake.getCollectionMutex.Lock()
	defer fake.getCollectionMutex.Unlock()
	fake.GetCollectionStub = nil
	if fake.getCollectionReturnsOnCall == nil {
		fake.getCollectionReturnsOnCall = make(map[int]struct {
			result1 *mongo.Collection
		})
	}
	fake.getCollectionReturnsOnCall[i] = struct {
		result1 *mongo.Collection
	}{result1}
}

func (fake *FakeMongoClient) GetDatabase(arg1 string) *mongo.Database {
	fake.getDatabaseMutex.Lock()
	ret, specificReturn := fake.getDatabaseReturnsOnCall[len(fake.getDatabaseArgsForCall)]
	fake.getDatabaseArgsForCall = append(fake.getDatabaseArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetDatabase", []interface{}{arg1})
	fake.getDatabaseMutex.Unlock()
	if fake.GetDatabaseStub != nil {
		return fake.GetDatabaseStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getDatabaseReturns
	return fakeReturns.result1
}

func (fake *FakeMongoClient) GetDatabaseCallCount() int {
	fake.getDatabaseMutex.RLock()
	defer fake.getDatabaseMutex.RUnlock()
	return len(fake.getDatabaseArgsForCall)
}

func (fake *FakeMongoClient) GetDatabaseCalls(stub func(string) *mongo.Database) {
	fake.getDatabaseMutex.Lock()
	defer fake.getDatabaseMutex.Unlock()
	fake.GetDatabaseStub = stub
}

func (fake *FakeMongoClient) GetDatabaseArgsForCall(i int) string {
	fake.getDatabaseMutex.RLock()
	defer fake.getDatabaseMutex.RUnlock()
	argsForCall := fake.getDatabaseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMongoClient) GetDatabaseReturns(result1 *mongo.Database) {
	fake.getDatabaseMutex.Lock()
	defer fake.getDatabaseMutex.Unlock()
	fake.GetDatabaseStub = nil
	fake.getDatabaseReturns = struct {
		result1 *mongo.Database
	}{result1}
}

func (fake *FakeMongoClient) GetDatabaseReturnsOnCall(i int, result1 *mongo.Database) {
	fake.getDatabaseMutex.Lock()
	defer fake.getDatabaseMutex.Unlock()
	fake.GetDatabaseStub = nil
	if fake.getDatabaseReturnsOnCall == nil {
		fake.getDatabaseReturnsOnCall = make(map[int]struct {
			result1 *mongo.Database
		})
	}
	fake.getDatabaseReturnsOnCall[i] = struct {
		result1 *mongo.Database
	}{result1}
}

func (fake *FakeMongoClient) InsertData(arg1 string, arg2 string, arg3 interface{}) (*mongo.InsertOneResult, error) {
	fake.insertDataMutex.Lock()
	ret, specificReturn := fake.insertDataReturnsOnCall[len(fake.insertDataArgsForCall)]
	fake.insertDataArgsForCall = append(fake.insertDataArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	fake.recordInvocation("InsertData", []interface{}{arg1, arg2, arg3})
	fake.insertDataMutex.Unlock()
	if fake.InsertDataStub != nil {
		return fake.InsertDataStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.insertDataReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMongoClient) InsertDataCallCount() int {
	fake.insertDataMutex.RLock()
	defer fake.insertDataMutex.RUnlock()
	return len(fake.insertDataArgsForCall)
}

func (fake *FakeMongoClient) InsertDataCalls(stub func(string, string, interface{}) (*mongo.InsertOneResult, error)) {
	fake.insertDataMutex.Lock()
	defer fake.insertDataMutex.Unlock()
	fake.InsertDataStub = stub
}

func (fake *FakeMongoClient) InsertDataArgsForCall(i int) (string, string, interface{}) {
	fake.insertDataMutex.RLock()
	defer fake.insertDataMutex.RUnlock()
	argsForCall := fake.insertDataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMongoClient) InsertDataReturns(result1 *mongo.InsertOneResult, result2 error) {
	fake.insertDataMutex.Lock()
	defer fake.insertDataMutex.Unlock()
	fake.InsertDataStub = nil
	fake.insertDataReturns = struct {
		result1 *mongo.InsertOneResult
		result2 error
	}{result1, result2}
}

func (fake *FakeMongoClient) InsertDataReturnsOnCall(i int, result1 *mongo.InsertOneResult, result2 error) {
	fake.insertDataMutex.Lock()
	defer fake.insertDataMutex.Unlock()
	fake.InsertDataStub = nil
	if fake.insertDataReturnsOnCall == nil {
		fake.insertDataReturnsOnCall = make(map[int]struct {
			result1 *mongo.InsertOneResult
			result2 error
		})
	}
	fake.insertDataReturnsOnCall[i] = struct {
		result1 *mongo.InsertOneResult
		result2 error
	}{result1, result2}
}

func (fake *FakeMongoClient) UpdateOne(arg1 string, arg2 string, arg3 interface{}, arg4 interface{}) (*mongo.UpdateResult, error) {
	fake.updateOneMutex.Lock()
	ret, specificReturn := fake.updateOneReturnsOnCall[len(fake.updateOneArgsForCall)]
	fake.updateOneArgsForCall = append(fake.updateOneArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 interface{}
		arg4 interface{}
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("UpdateOne", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateOneMutex.Unlock()
	if fake.UpdateOneStub != nil {
		return fake.UpdateOneStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateOneReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMongoClient) UpdateOneCallCount() int {
	fake.updateOneMutex.RLock()
	defer fake.updateOneMutex.RUnlock()
	return len(fake.updateOneArgsForCall)
}

func (fake *FakeMongoClient) UpdateOneCalls(stub func(string, string, interface{}, interface{}) (*mongo.UpdateResult, error)) {
	fake.updateOneMutex.Lock()
	defer fake.updateOneMutex.Unlock()
	fake.UpdateOneStub = stub
}

func (fake *FakeMongoClient) UpdateOneArgsForCall(i int) (string, string, interface{}, interface{}) {
	fake.updateOneMutex.RLock()
	defer fake.updateOneMutex.RUnlock()
	argsForCall := fake.updateOneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeMongoClient) UpdateOneReturns(result1 *mongo.UpdateResult, result2 error) {
	fake.updateOneMutex.Lock()
	defer fake.updateOneMutex.Unlock()
	fake.UpdateOneStub = nil
	fake.updateOneReturns = struct {
		result1 *mongo.UpdateResult
		result2 error
	}{result1, result2}
}

func (fake *FakeMongoClient) UpdateOneReturnsOnCall(i int, result1 *mongo.UpdateResult, result2 error) {
	fake.updateOneMutex.Lock()
	defer fake.updateOneMutex.Unlock()
	fake.UpdateOneStub = nil
	if fake.updateOneReturnsOnCall == nil {
		fake.updateOneReturnsOnCall = make(map[int]struct {
			result1 *mongo.UpdateResult
			result2 error
		})
	}
	fake.updateOneReturnsOnCall[i] = struct {
		result1 *mongo.UpdateResult
		result2 error
	}{result1, result2}
}

func (fake *FakeMongoClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findAllObjectsMutex.RLock()
	defer fake.findAllObjectsMutex.RUnlock()
	fake.findObjectMutex.RLock()
	defer fake.findObjectMutex.RUnlock()
	fake.findObjectsMutex.RLock()
	defer fake.findObjectsMutex.RUnlock()
	fake.getCollectionMutex.RLock()
	defer fake.getCollectionMutex.RUnlock()
	fake.getDatabaseMutex.RLock()
	defer fake.getDatabaseMutex.RUnlock()
	fake.insertDataMutex.RLock()
	defer fake.insertDataMutex.RUnlock()
	fake.updateOneMutex.RLock()
	defer fake.updateOneMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMongoClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ util.MongoClient = new(FakeMongoClient)
